// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../../../apps/storybook/stories/assets/erd.svg"
  theme    = "forest"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  PRIVATE   @map("private")
  PUBLIC    @map("public")
  FRIENDS   @map("friends")
  ATTENDEES @map("attendees")
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  host          Host[]
  attendee      Attendee[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Host {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  isFixed Boolean @default(false)
}

model Attendee {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  isFixed Boolean @default(false)
}

model Event {
  id          String  @id @default(cuid())
  title       String
  description String?
  location    Json?
  visibility    Visibility
  hidden        Boolean    @default(false)
  hosts         Host[]
  guests        Attendee[]
  teamId        Int?
  eventName     String?
  timeZone      String?
  startDate     DateTime?
  endDate       DateTime?
  requiresRSVP  Boolean    @default(false)
  showAttendees Boolean    @default(true)
  //   recurringEvent       Json?
  metadata      Json?
}
